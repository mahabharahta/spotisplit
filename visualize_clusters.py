#!/usr/bin/env python3
"""
SpotiSplit Cluster Visualization
–í—ñ–∑—É–∞–ª—ñ–∑—É—î 20 –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ —É 20-–≤–∏–º—ñ—Ä–Ω–æ–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from itertools import combinations
import warnings
warnings.filterwarnings('ignore')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ—ó –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10

def load_cluster_data(csv_file="spotisplit_clusters_no_audio.csv"):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ –∑ CSV —Ñ–∞–π–ª—É"""
    try:
        df = pd.read_csv(csv_file)
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} —Ç—Ä–µ–∫—ñ–≤ –∑ {len(df.columns)} –∫–æ–ª–æ–Ω–∫–∞–º–∏")
        print(f"üéØ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤: {df['cluster'].nunique()}")
        return df
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print("üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å run_spotisplit_no_audio.py")
        return None

def create_feature_pairs_plot(df, max_features=8):
    """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫ –≤—Å—ñ—Ö –ø–∞—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑ —Ä–æ–∑–±–∏–≤–∫–æ—é –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö"""
    
    # –í–∏–±—ñ—Ä —á–∏—Å–ª–æ–≤–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
    numeric_features = df.select_dtypes(include=[np.number]).columns.tolist()
    numeric_features = [f for f in numeric_features if f != 'cluster']
    
    # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
    if len(numeric_features) > max_features:
        # –í–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–π–±—ñ–ª—å—à —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        feature_importance = []
        for feature in numeric_features:
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∞—Ä—ñ–∞—Ü—ñ—é –º—ñ–∂ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
            between_cluster_var = df.groupby('cluster')[feature].var().mean()
            within_cluster_var = df[feature].var()
            if within_cluster_var > 0:
                importance = between_cluster_var / within_cluster_var
                feature_importance.append((feature, importance))
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—é —Ç–∞ –≤–∏–±–∏—Ä–∞—î–º–æ —Ç–æ–ø
        feature_importance.sort(key=lambda x: x[1], reverse=True)
        selected_features = [f[0] for f in feature_importance[:max_features]]
    else:
        selected_features = numeric_features
    
    print(f"üìä –í—ñ–∑—É–∞–ª—ñ–∑—É—é {len(selected_features)} –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:")
    for i, feature in enumerate(selected_features, 1):
        print(f"   {i}. {feature}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ –ø–∞—Ä–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    feature_pairs = list(combinations(selected_features, 2))
    n_pairs = len(feature_pairs)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Å—ñ—Ç–∫–∏
    cols = min(4, n_pairs)
    rows = (n_pairs + cols - 1) // cols
    
    fig, axes = plt.subplots(rows, cols, figsize=(4*cols, 4*rows))
    fig.suptitle(f'SpotiSplit: –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è 20 –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ —É {len(selected_features)}-–≤–∏–º—ñ—Ä–Ω–æ–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ', 
                 fontsize=16, fontweight='bold')
    
    # –Ø–∫—â–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä—è–¥ –∞–±–æ –∫–æ–ª–æ–Ω–∫–∞
    if rows == 1:
        axes = axes.reshape(1, -1)
    if cols == 1:
        axes = axes.reshape(-1, 1)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ª—å–æ—Ä–æ–≤—É –ø–∞–ª—ñ—Ç—Ä—É –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤
    colors = plt.cm.tab20(np.linspace(0, 1, df['cluster'].nunique()))
    
    for idx, (feature1, feature2) in enumerate(feature_pairs):
        row = idx // cols
        col = idx % cols
        
        if rows == 1:
            ax = axes[col]
        elif cols == 1:
            ax = axes[row]
        else:
            ax = axes[row, col]
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ scatter plot –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏
        for cluster_id in sorted(df['cluster'].unique()):
            cluster_data = df[df['cluster'] == cluster_id]
            ax.scatter(cluster_data[feature1], cluster_data[feature2], 
                      c=[colors[cluster_id]], alpha=0.6, s=20, 
                      label=f'Cluster {cluster_id}' if idx == 0 else "")
        
        ax.set_xlabel(feature1.replace('_', ' ').title())
        ax.set_ylabel(feature2.replace('_', ' ').title())
        ax.set_title(f'{feature1} vs {feature2}')
        ax.grid(True, alpha=0.3)
        
        # –î–æ–¥–∞—î–º–æ –ª–µ–≥–µ–Ω–¥—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞
        if idx == 0:
            ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=8)
    
    # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏
    for idx in range(n_pairs, rows * cols):
        row = idx // cols
        col = idx % cols
        if rows == 1:
            axes[col].set_visible(False)
        elif cols == 1:
            axes[row].set_visible(False)
        else:
            axes[row, col].set_visible(False)
    
    plt.tight_layout()
    plt.savefig('spotisplit_feature_pairs.png', dpi=300, bbox_inches='tight')
    print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≥—Ä–∞—Ñ—ñ–∫: spotisplit_feature_pairs.png")
    plt.show()

def create_cluster_summary_heatmap(df):
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ–ø–ª–æ–≤—É –∫–∞—Ä—Ç—É —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö"""
    
    # –í–∏–±—ñ—Ä —á–∏—Å–ª–æ–≤–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    numeric_features = df.select_dtypes(include=[np.number]).columns.tolist()
    numeric_features = [f for f in numeric_features if f != 'cluster']
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö
    cluster_means = df.groupby('cluster')[numeric_features].mean()
    
    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫—Ä–∞—â–æ—ó –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
    cluster_means_normalized = (cluster_means - cluster_means.mean()) / cluster_means.std()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–ø–ª–æ–≤—É –∫–∞—Ä—Ç—É
    plt.figure(figsize=(16, 10))
    sns.heatmap(cluster_means_normalized.T, 
                annot=True, 
                cmap='RdBu_r', 
                center=0,
                fmt='.2f',
                cbar_kws={'label': 'Z-score (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è)'})
    
    plt.title('SpotiSplit: –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Å–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è)', 
              fontsize=16, fontweight='bold')
    plt.xlabel('–ù–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞')
    plt.ylabel('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏')
    plt.xticks(rotation=0)
    plt.yticks(rotation=0)
    
    plt.tight_layout()
    plt.savefig('spotisplit_cluster_heatmap.png', dpi=300, bbox_inches='tight')
    print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–µ–ø–ª–æ–≤—É –∫–∞—Ä—Ç—É: spotisplit_cluster_heatmap.png")
    plt.show()

def create_cluster_size_distribution(df):
    """–°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Ä–æ–∑–º—ñ—Ä—ñ–≤ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤"""
    
    cluster_sizes = df['cluster'].value_counts().sort_index()
    
    plt.figure(figsize=(14, 8))
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ bar plot
    bars = plt.bar(range(len(cluster_sizes)), cluster_sizes.values, 
                   color=plt.cm.tab20(np.linspace(0, 1, len(cluster_sizes))))
    
    # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∏
    for i, (cluster_id, size) in enumerate(cluster_sizes.items()):
        plt.text(i, size + 5, str(size), ha='center', va='bottom', fontweight='bold')
    
    plt.title('SpotiSplit: –†–æ–∑–ø–æ–¥—ñ–ª —Ä–æ–∑–º—ñ—Ä—ñ–≤ 20 –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤', fontsize=16, fontweight='bold')
    plt.xlabel('–ù–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞')
    plt.ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–∫—ñ–≤')
    plt.xticks(range(len(cluster_sizes)), [f'Cluster {i}' for i in cluster_sizes.index])
    plt.grid(True, alpha=0.3, axis='y')
    
    # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_tracks = len(df)
    avg_size = total_tracks / len(cluster_sizes)
    plt.axhline(y=avg_size, color='red', linestyle='--', alpha=0.7, 
                label=f'–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä: {avg_size:.0f} —Ç—Ä–µ–∫—ñ–≤')
    plt.legend()
    
    plt.tight_layout()
    plt.savefig('spotisplit_cluster_sizes.png', dpi=300, bbox_inches='tight')
    print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–∑–º—ñ—Ä—ñ–≤: spotisplit_cluster_sizes.png")
    plt.show()

def create_feature_distributions(df, top_features=6):
    """–°—Ç–≤–æ—Ä—é—î —Ä–æ–∑–ø–æ–¥—ñ–ª–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö"""
    
    # –í–∏–±—ñ—Ä —Ç–æ–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    numeric_features = df.select_dtypes(include=[np.number]).columns.tolist()
    numeric_features = [f for f in numeric_features if f != 'cluster']
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    feature_importance = []
    for feature in numeric_features:
        between_cluster_var = df.groupby('cluster')[feature].var().mean()
        within_cluster_var = df[feature].var()
        if within_cluster_var > 0:
            importance = between_cluster_var / within_cluster_var
            feature_importance.append((feature, importance))
    
    feature_importance.sort(key=lambda x: x[1], reverse=True)
    top_features_list = [f[0] for f in feature_importance[:top_features]]
    
    print(f"üìä –í—ñ–∑—É–∞–ª—ñ–∑—É—é —Ä–æ–∑–ø–æ–¥—ñ–ª–∏ —Ç–æ–ø-{top_features} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:")
    for i, feature in enumerate(top_features_list, 1):
        print(f"   {i}. {feature}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ subplots
    cols = min(3, top_features)
    rows = (top_features + cols - 1) // cols
    
    fig, axes = plt.subplots(rows, cols, figsize=(5*cols, 4*rows))
    fig.suptitle('SpotiSplit: –†–æ–∑–ø–æ–¥—ñ–ª–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö', 
                 fontsize=16, fontweight='bold')
    
    if rows == 1:
        axes = axes.reshape(1, -1)
    if cols == 1:
        axes = axes.reshape(-1, 1)
    
    colors = plt.cm.tab20(np.linspace(0, 1, df['cluster'].nunique()))
    
    for idx, feature in enumerate(top_features_list):
        row = idx // cols
        col = idx % cols
        
        if rows == 1:
            ax = axes[col]
        elif cols == 1:
            ax = axes[row]
        else:
            ax = axes[row, col]
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ box plot –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        cluster_data = [df[df['cluster'] == cluster_id][feature].values 
                       for cluster_id in sorted(df['cluster'].unique())]
        
        bp = ax.boxplot(cluster_data, patch_artist=True)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—å–æ—Ä–∏ –¥–ª—è box plots
        for patch, color in zip(bp['boxes'], colors):
            patch.set_facecolor(color)
            patch.set_alpha(0.7)
        
        ax.set_title(f'{feature.replace("_", " ").title()}')
        ax.set_xlabel('–ù–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞')
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–Ω—è')
        ax.grid(True, alpha=0.3)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥–ø–∏—Å–∏ –æ—Å—ñ X
        ax.set_xticklabels([f'Cluster {i}' for i in sorted(df['cluster'].unique())])
    
    # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏
    for idx in range(top_features, rows * cols):
        row = idx // cols
        col = idx % cols
        if rows == 1:
            axes[col].set_visible(False)
        elif cols == 1:
            axes[row].set_visible(False)
        else:
            axes[row, col].set_visible(False)
    
    plt.tight_layout()
    plt.savefig('spotisplit_feature_distributions.png', dpi=300, bbox_inches='tight')
    print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–æ–∑–ø–æ–¥—ñ–ª–∏: spotisplit_feature_distributions.png")
    plt.show()

def create_3d_scatter_plot(df, feature1='popularity', feature2='duration_minutes', feature3='age_years'):
    """–°—Ç–≤–æ—Ä—é—î 3D scatter plot –¥–ª—è —Ç—Ä—å–æ—Ö –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
    
    fig = plt.figure(figsize=(12, 10))
    ax = fig.add_subplot(111, projection='3d')
    
    colors = plt.cm.tab20(np.linspace(0, 1, df['cluster'].nunique()))
    
    for cluster_id in sorted(df['cluster'].unique()):
        cluster_data = df[df['cluster'] == cluster_id]
        ax.scatter(cluster_data[feature1], cluster_data[feature2], cluster_data[feature3],
                  c=[colors[cluster_id]], alpha=0.6, s=20, label=f'Cluster {cluster_id}')
    
    ax.set_xlabel(feature1.replace('_', ' ').title())
    ax.set_ylabel(feature2.replace('_', ' ').title())
    ax.set_zlabel(feature3.replace('_', ' ').title())
    ax.set_title(f'SpotiSplit: 3D –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤\n{feature1} vs {feature2} vs {feature3}', 
                 fontsize=14, fontweight='bold')
    
    ax.legend(bbox_to_anchor=(1.15, 1), loc='upper left')
    plt.tight_layout()
    plt.savefig('spotisplit_3d_scatter.png', dpi=300, bbox_inches='tight')
    print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ 3D –≥—Ä–∞—Ñ—ñ–∫: spotisplit_3d_scatter.png")
    plt.show()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üéµ SpotiSplit Cluster Visualization")
    print("=" * 50)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
    df = load_cluster_data()
    if df is None:
        return
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤:")
    print(f"   –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–∫—ñ–≤: {len(df)}")
    print(f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤: {df['cluster'].nunique()}")
    print(f"   –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞: {len(df) / df['cluster'].nunique():.1f}")
    print(f"   –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞: {df['cluster'].value_counts().min()}")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞: {df['cluster'].value_counts().max()}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
    print(f"\nüé® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π...")
    
    # 1. –†–æ–∑–ø–æ–¥—ñ–ª —Ä–æ–∑–º—ñ—Ä—ñ–≤ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤
    print("1Ô∏è‚É£ –†–æ–∑–ø–æ–¥—ñ–ª —Ä–æ–∑–º—ñ—Ä—ñ–≤ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤...")
    create_cluster_size_distribution(df)
    
    # 2. –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤
    print("2Ô∏è‚É£ –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤...")
    create_cluster_summary_heatmap(df)
    
    # 3. –†–æ–∑–ø–æ–¥—ñ–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    print("3Ô∏è‚É£ –†–æ–∑–ø–æ–¥—ñ–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")
    create_feature_distributions(df, top_features=9)
    
    # 4. –ü–∞—Ä–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    print("4Ô∏è‚É£ –ü–∞—Ä–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")
    create_feature_pairs_plot(df, max_features=8)
    
    # 5. 3D scatter plot
    print("5Ô∏è‚É£ 3D scatter plot...")
    create_3d_scatter_plot(df)
    
    print(f"\nüéâ –í—Å—ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
    print(f"üìÅ –§–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó:")
    print(f"   ‚Ä¢ spotisplit_cluster_sizes.png")
    print(f"   ‚Ä¢ spotisplit_cluster_heatmap.png")
    print(f"   ‚Ä¢ spotisplit_feature_distributions.png")
    print(f"   ‚Ä¢ spotisplit_feature_pairs.png")
    print(f"   ‚Ä¢ spotisplit_3d_scatter.png")

if __name__ == "__main__":
    main()
