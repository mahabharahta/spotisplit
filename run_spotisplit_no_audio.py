#!/usr/bin/env python3
"""
SpotiSplit MVP - –í–µ—Ä—Å—ñ—è –±–µ–∑ audio features
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—Ä–µ–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó
"""

import os
import sys
import time
import argparse
from datetime import datetime
from typing import List, Dict, Any

try:
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import spotipy
    from spotipy.oauth2 import SpotifyOAuth
    from sklearn.preprocessing import StandardScaler
    from sklearn.cluster import KMeans
    from sklearn.metrics import silhouette_score
    from sklearn.decomposition import PCA
except ImportError as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    print("üì¶ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: pip install -r requirements.txt")
    sys.exit(1)

def load_config():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ config.py –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"""
    try:
        import config
        print("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ config.py")
        return {
            "CLIENT_ID": config.CLIENT_ID,
            "CLIENT_SECRET": config.CLIENT_SECRET,
            "REDIRECT_URI": config.REDIRECT_URI,
            "USERNAME": config.USERNAME,
            "SOURCE_PLAYLIST_URL": config.SOURCE_PLAYLIST_URL,
            "N_CLUSTERS": config.N_CLUSTERS,
            "MAKE_PUBLIC": config.MAKE_PUBLIC,
            "PLAYLIST_NAME_PREFIX": config.PLAYLIST_NAME_PREFIX,
            "RANDOM_STATE": config.RANDOM_STATE
        }
    except ImportError:
        print("‚ö†Ô∏è –§–∞–π–ª config.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.")
        return {
            "CLIENT_ID": "YOUR_CLIENT_ID",
            "CLIENT_SECRET": "YOUR_CLIENT_SECRET", 
            "REDIRECT_URI": "http://localhost:8080/callback",
            "USERNAME": "your_spotify_username",
            "SOURCE_PLAYLIST_URL": "https://open.spotify.com/playlist/37i9dQZF1DXcBWIGoYBM5M",
            "N_CLUSTERS": 5,
            "MAKE_PUBLIC": False,
            "PLAYLIST_NAME_PREFIX": "SpotiSplit",
            "RANDOM_STATE": 42
        }

def get_all_liked_tracks(sp) -> List[Dict[str, Any]]:
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ Liked Songs"""
    results = sp.current_user_saved_tracks(limit=50)
    items = results.get("items", [])
    while results.get("next"):
        results = sp.next(results)
        items.extend(results.get("items", []))
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—Ä–µ–∫–∏ (–±–µ–∑ episodes/local)
    items = [it for it in items if it.get("track") and it["track"].get("id")]
    return items

def batched(iterable, n=100):
    """–†–æ–∑–±–∏–≤–∞—î —ñ—Ç–µ—Ä–∞–±–µ–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –Ω–∞ –±–∞—Ç—á—ñ"""
    batch = []
    for x in iterable:
        batch.append(x)
        if len(batch) == n:
            yield batch
            batch = []
    if batch:
        yield batch

def track_row(item):
    """–°—Ç–≤–æ—Ä—é—î —Ä—è–¥–æ–∫ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç—Ä–µ–∫—É –±–µ–∑ audio features"""
    t = item["track"]
    return {
        "track_id": t["id"],
        "track_name": t["name"],
        "artist": ", ".join([a["name"] for a in t["artists"]]),
        "album": t["album"]["name"] if t.get("album") else None,
        "added_at": item.get("added_at"),
        "duration_ms": t.get("duration_ms", 0),
        "popularity": t.get("popularity", 0),
        "explicit": t.get("explicit", False),
        "uri": t.get("uri"),
        "external_url": t.get("external_urls", {}).get("spotify"),
        "release_date": t.get("album", {}).get("release_date") if t.get("album") else None,
        "album_type": t.get("album", {}).get("album_type") if t.get("album") else None,
        "is_local": t.get("is_local", False),
        "track_number": t.get("track_number"),
        "disc_number": t.get("disc_number"),
        "available_markets": len(t.get("available_markets", [])),
    }

def create_playlist(sp, user_id: str, name: str, description: str = "", public: bool = False) -> str:
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –ø–ª–µ–π–ª—ñ—Å—Ç"""
    try:
        result = sp.user_playlist_create(
            user_id, name, description=description, public=public
        )
        return result["id"]
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–µ–π–ª—ñ—Å—Ç–∞: {e}")
        return None

def add_tracks_to_playlist(sp, playlist_id: str, track_uris: List[str]):
    """–î–æ–¥–∞—î —Ç—Ä–µ–∫–∏ –¥–æ –ø–ª–µ–π–ª—ñ—Å—Ç–∞"""
    try:
        for chunk in batched(track_uris, 100):
            sp.playlist_add_items(playlist_id, chunk)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–µ–∫—ñ–≤: {e}")

# Constants
SPOTIFY_SCOPES = [
    "playlist-read-private",
    "playlist-read-collaborative", 
    "playlist-modify-private",
    "user-library-read",  # –î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ Liked Songs
]

def delete_spotisplit_playlists(sp, user_id: str, prefix: str = "SpotiSplit"):
    """–í–∏–¥–∞–ª—è—î –≤—Å—ñ –ø–ª–µ–π–ª—ñ—Å—Ç–∏ –∑ 'SpotiSplit' –≤ –Ω–∞–∑–≤—ñ"""
    print(f"üóëÔ∏è –ü–æ—à—É–∫ –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤ –∑ '{prefix}' –≤ –Ω–∞–∑–≤—ñ...")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–ª–µ–π–ª—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    playlists = []
    results = sp.user_playlists(user_id, limit=50)
    playlists.extend(results.get("items", []))
    
    while results.get("next"):
        results = sp.next(results)
        playlists.extend(results.get("items", []))
    
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–ª–µ–π–ª—ñ—Å—Ç–∏ –∑ SpotiSplit –≤ –Ω–∞–∑–≤—ñ
    spotisplit_playlists = [pl for pl in playlists if prefix.lower() in pl["name"].lower()]
    
    if not spotisplit_playlists:
        print(f"‚úÖ –ü–ª–µ–π–ª—ñ—Å—Ç–∏ –∑ '{prefix}' –≤ –Ω–∞–∑–≤—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(spotisplit_playlists)} –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    for pl in spotisplit_playlists:
        print(f"   ‚Ä¢ {pl['name']} (ID: {pl['id']})")
    
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    confirm = input(f"\n‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ {len(spotisplit_playlists)} –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤? (yes/no): ")
    if confirm.lower() not in ['yes', 'y', '—Ç–∞–∫', '—Ç']:
        print("‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–ª–µ–π–ª—ñ—Å—Ç–∏
    deleted_count = 0
    for pl in spotisplit_playlists:
        try:
            sp.user_playlist_unfollow(user_id, pl["id"])
            print(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ: {pl['name']}")
            deleted_count += 1
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è '{pl['name']}': {e}")
    
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ {deleted_count}/{len(spotisplit_playlists)} –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤")

def authenticate_spotify(config):
    """Spotify authentication logic"""
    print(f"üéØ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤: {config['N_CLUSTERS']}")
    print(f"üîó –î–∂–µ—Ä–µ–ª–æ: {config['SOURCE_PLAYLIST_URL']}")
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Spotify API
    scopes = SPOTIFY_SCOPES.copy()
    if config["MAKE_PUBLIC"]:
        scopes.append("playlist-modify-public")

    os.environ["SPOTIPY_CLIENT_ID"] = config["CLIENT_ID"]
    os.environ["SPOTIPY_CLIENT_SECRET"] = config["CLIENT_SECRET"]
    os.environ["SPOTIPY_REDIRECT_URI"] = config["REDIRECT_URI"]

    try:
        auth_manager = SpotifyOAuth(scope=" ".join(scopes), show_dialog=True, cache_path=".cache-spotisplit-no-audio")
        sp = spotipy.Spotify(auth_manager=auth_manager)
        
        me = sp.me()
        user_id = me["id"]
        print(f"‚úÖ –£–≤—ñ–π—à–ª–∏ —è–∫: {me['display_name']} ({user_id})")
        return sp, user_id
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
        return None, None

def load_and_cluster_tracks(sp, config):
    """Load tracks and perform clustering"""
    try:
        # 1) –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—Ä–µ–∫–∏
        print("\nüì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–∫—ñ–≤...")
        print("üéß –î–∂–µ—Ä–µ–ª–æ: Liked Songs")
        items = get_all_liked_tracks(sp)
        
        df = pd.DataFrame([track_row(it) for it in items])
        print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(df)} —Ç—Ä–µ–∫—ñ–≤.")

        # 2) –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó
        print("\nüîç –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ —á–∏—Å–ª–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è 20-–≤–∏–º—ñ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É
        print("üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")
        
        # –ë–∞–∑–æ–≤—ñ —á–∏—Å–ª–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        df["explicit"] = df["explicit"].astype(int)
        df["is_local"] = df["is_local"].astype(int)
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        df = df.fillna(0)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        df["duration_minutes"] = df["duration_ms"] / 60000
        df["popularity_normalized"] = df["popularity"] / 100.0
        df["track_position_ratio"] = df["track_number"] / df["disc_number"].replace(0, 1)
        df["market_coverage"] = df["available_markets"] / 100.0  # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∏–Ω–∫—ñ–≤
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —á–∞—Å–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ release_date
        df["release_year"] = pd.to_datetime(df["release_date"], errors='coerce').dt.year.fillna(2024)
        df["age_years"] = 2024 - df["release_year"]
        df["age_normalized"] = df["age_years"] / 50.0  # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–∫ —Ç—Ä–µ–∫—É
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        df["album_type_numeric"] = df["album_type"].map({
            'album': 3, 'single': 1, 'compilation': 2, 'ep': 1.5
        }).fillna(1)
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è 20-–≤–∏–º—ñ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É
        feature_cols = [
            "duration_minutes", "popularity_normalized", "explicit", "is_local",
            "track_position_ratio", "market_coverage", "age_normalized", 
            "album_type_numeric", "track_number", "disc_number", "available_markets",
            "duration_ms", "popularity", "release_year", "age_years"
        ]
        
        # –î–æ–¥–∞—î–º–æ –≤–∑–∞—î–º–æ–¥—ñ—ó –º—ñ–∂ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—Ä—É
        df["popularity_duration"] = df["popularity_normalized"] * df["duration_minutes"]
        df["age_popularity"] = df["age_normalized"] * df["popularity_normalized"]
        df["explicit_popularity"] = df["explicit"] * df["popularity_normalized"]
        df["market_popularity"] = df["market_coverage"] * df["popularity_normalized"]
        df["duration_age"] = df["duration_minutes"] * df["age_normalized"]
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        feature_cols = [
            "duration_minutes", "popularity_normalized", "explicit", "is_local",
            "track_position_ratio", "market_coverage", "age_normalized", 
            "album_type_numeric", "track_number", "disc_number", "available_markets",
            "duration_ms", "popularity", "release_year", "age_years",
            "popularity_duration", "age_popularity", "explicit_popularity", 
            "market_popularity", "duration_age"
        ]
        
        print(f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ {len(feature_cols)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó")
        
        X = df[feature_cols].copy()
        
        if len(X) < config["N_CLUSTERS"]:
            print(f"‚ö†Ô∏è –¢—Ä–µ–∫—ñ–≤ –º–µ–Ω—à–µ, –Ω—ñ–∂ N_CLUSTERS={config['N_CLUSTERS']}")
            config["N_CLUSTERS"] = max(1, len(X))

        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        # 3) –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è
        print("\nüîç –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è...")
        kmeans = KMeans(n_clusters=int(config["N_CLUSTERS"]), random_state=config["RANDOM_STATE"], n_init=10)
        labels = kmeans.fit_predict(X_scaled)

        df["cluster"] = labels

        # –û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó
        sil = None
        if int(config["N_CLUSTERS"]) > 1 and len(np.unique(labels)) > 1:
            sil = silhouette_score(X_scaled, labels)
        print(f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä—ñ–≤: {config['N_CLUSTERS']} | Silhouette: {sil:.3f}" if sil is not None else f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä—ñ–≤: {config['N_CLUSTERS']}")
        
        return df
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
        import traceback
        traceback.print_exc()
        return None

def create_playlists_from_clusters(sp, df, config, user_id):
    """Create playlists from clustering results"""
    try:
        # 4) –ê–Ω–∞–ª—ñ–∑ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤
        print("\nüìä –ê–Ω–∞–ª—ñ–∑ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤...")
        print("=" * 80)
        
        for c in sorted(df["cluster"].unique()):
            cluster_df = df[df["cluster"] == c]
            print(f"\nüéØ –ö–ª–∞—Å—Ç–µ—Ä {c}: {len(cluster_df)} —Ç—Ä–µ–∫—ñ–≤")
            print("-" * 40)
            
            # –ë–∞–∑–æ–≤—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            print(f"üìà –ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å: {cluster_df['popularity'].mean():.1f} ¬± {cluster_df['popularity'].std():.1f}")
            print(f"‚è±Ô∏è  –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {cluster_df['duration_minutes'].mean():.1f} —Ö–≤ ¬± {cluster_df['duration_minutes'].std():.1f}")
            print(f"üìÖ –í—ñ–∫ —Ç—Ä–µ–∫—ñ–≤: {cluster_df['age_years'].mean():.1f} —Ä–æ–∫—ñ–≤ ¬± {cluster_df['age_years'].std():.1f}")
            
            # –Ø–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            explicit_count = cluster_df['explicit'].sum()
            explicit_pct = (explicit_count / len(cluster_df)) * 100
            print(f"üîû –Ø–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç: {explicit_count}/{len(cluster_df)} ({explicit_pct:.1f}%)")
            
            # –õ–æ–∫–∞–ª—å–Ω—ñ —Ç—Ä–µ–∫–∏
            local_count = cluster_df['is_local'].sum()
            local_pct = (local_count / len(cluster_df)) * 100
            print(f"üè† –õ–æ–∫–∞–ª—å–Ω—ñ —Ç—Ä–µ–∫–∏: {local_count}/{len(cluster_df)} ({local_pct:.1f}%)")
            
            # –†–∏–Ω–∫–æ–≤–µ –ø–æ–∫—Ä–∏—Ç—Ç—è
            avg_markets = cluster_df['available_markets'].mean()
            print(f"üåç –°–µ—Ä–µ–¥–Ω—î —Ä–∏–Ω–∫–æ–≤–µ –ø–æ–∫—Ä–∏—Ç—Ç—è: {avg_markets:.0f} —Ä–∏–Ω–∫—ñ–≤")
            
            # –¢–∏–ø –∞–ª—å–±–æ–º—É
            album_types = cluster_df['album_type'].value_counts()
            main_type = album_types.index[0] if len(album_types) > 0 else "unknown"
            main_count = album_types.iloc[0] if len(album_types) > 0 else 0
            print(f"üíø –û—Å–Ω–æ–≤–Ω–∏–π —Ç–∏–ø: {main_type} ({main_count}/{len(cluster_df)})")
            
            # –¢–æ–ø —Ç—Ä–µ–∫–∏ –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—é
            top_tracks = cluster_df.nlargest(3, 'popularity')[['track_name', 'artist', 'popularity']]
            print("üéµ –¢–æ–ø —Ç—Ä–µ–∫–∏:")
            for _, track in top_tracks.iterrows():
                print(f"   ‚Ä¢ {track['track_name']} - {track['artist']} (–ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å: {track['popularity']:.0f})")
        
        # 5) –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤
        print("\nüì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤...")
        created = {}
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
        base_name = f"{config['PLAYLIST_NAME_PREFIX']}: Liked Songs (No Audio)"

        for c in sorted(df["cluster"].unique()):
            name = f"{base_name} ¬∑ Cluster {int(c)} / {int(config['N_CLUSTERS'])}"
            desc = f"–°—Ç–≤–æ—Ä–µ–Ω–æ SpotiSplit {timestamp}. –î–∂–µ—Ä–µ–ª–æ: Liked Songs (–±–µ–∑ audio features)"
            pl_id = create_playlist(sp, user_id, name=name, description=desc, public=config["MAKE_PUBLIC"])
            if pl_id:
                created[int(c)] = pl_id
                cluster_uris = df.loc[df["cluster"] == c, "uri"].dropna().tolist()
                add_tracks_to_playlist(sp, pl_id, cluster_uris)
                print(f"üì¶ {name}: –¥–æ–¥–∞–Ω–æ {len(cluster_uris)} —Ç—Ä–µ–∫—ñ–≤")

        total_assigned = len(df)
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –†–æ–∑–∫–ª–∞–¥–µ–Ω–æ {total_assigned}/{len(df)} —Ç—Ä–µ–∫—ñ–≤ —É {len(created)} –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤.")

        # 6) –ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        out_csv = "spotisplit_clusters_no_audio.csv"
        df.to_csv(out_csv, index=False)
        print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: {out_csv}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –ü–∞—Ä—Å–∏–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    parser = argparse.ArgumentParser(description="SpotiSplit MVP - –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è Spotify –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤ (–±–µ–∑ audio features)")
    parser.add_argument("--delete", action="store_true", help="–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –ø–ª–µ–π–ª—ñ—Å—Ç–∏ –∑ 'SpotiSplit' –≤ –Ω–∞–∑–≤—ñ")
    parser.add_argument("--prefix", type=str, default="SpotiSplit", help="–ü—Ä–µ—Ñ—ñ–∫—Å –¥–ª—è –ø–æ—à—É–∫—É –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: SpotiSplit)")
    args = parser.parse_args()
    
    print("üéµ SpotiSplit MVP - –í–µ—Ä—Å—ñ—è –±–µ–∑ audio features")
    print("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—Ä–µ–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó")
    
    config = load_config()
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è Spotify
    sp, user_id = authenticate_spotify(config)
    if sp is None:
        return
    
    # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ --delete, –≤–∏–¥–∞–ª—è—î–º–æ –ø–ª–µ–π–ª—ñ—Å—Ç–∏ —Ç–∞ –≤–∏—Ö–æ–¥–∏–º–æ
    if args.delete:
        delete_spotisplit_playlists(sp, user_id, args.prefix)
        return
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è —Ç—Ä–µ–∫—ñ–≤
    df = load_and_cluster_tracks(sp, config)
    if df is None:
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–µ–π–ª—ñ—Å—Ç—ñ–≤ –∑ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤
    create_playlists_from_clusters(sp, df, config, user_id)

if __name__ == "__main__":
    main()
