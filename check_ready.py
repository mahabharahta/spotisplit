#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ SpotiSplit MVP –¥–æ –∑–∞–ø—É—Å–∫—É
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python3 check_ready.py –∞–±–æ make check
"""

import os
import sys
import importlib

def check_python_version():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–µ—Ä—Å—ñ—é Python"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå Python {version.major}.{version.minor} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è")
        print("üìã –ü–æ—Ç—Ä—ñ–±–µ–Ω Python 3.8+")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    return True

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    required_packages = [
        'spotipy',
        'pandas', 
        'numpy',
        'matplotlib',
        'sklearn'
    ]
    
    missing = []
    for package in required_packages:
        try:
            importlib.import_module(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package}")
            missing.append(package)
    
    if missing:
        print(f"\nüì¶ –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: {', '.join(missing)}")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install -r requirements.txt")
        return False
    
    return True

def check_config():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
    try:
        from config import CLIENT_ID, CLIENT_SECRET
        if CLIENT_ID == "YOUR_CLIENT_ID" or CLIENT_SECRET == "YOUR_CLIENT_SECRET":
            print("‚ö†Ô∏è config.py –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            print("üìù –ó–∞–ø–æ–≤–Ω—ñ—Ç—å CLIENT_ID —Ç–∞ CLIENT_SECRET –≤ config.py")
            return False
        print("‚úÖ config.py –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        return True
    except ImportError:
        print("‚ùå config.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print("üí° –°—Ç–≤–æ—Ä—ñ—Ç—å: cp config.example.py config.py")
        return False

def check_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    required_files = [
        'requirements.txt',
        'config.py', 
        'run_spotisplit.py',
        'spotisplit_mvp.ipynb'
    ]
    
    missing = []
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file}")
            missing.append(file)
    
    if missing:
        print(f"\nüìÅ –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏: {', '.join(missing)}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
    print("üîç SpotiSplit MVP - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ")
    print("=" * 40)
    
    checks = [
        ("üêç –í–µ—Ä—Å—ñ—è Python", check_python_version),
        ("üì¶ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ", check_dependencies),
        ("‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è", check_config),
        ("üìÅ –§–∞–π–ª–∏ –ø—Ä–æ–µ–∫—Ç—É", check_files)
    ]
    
    results = []
    for name, check_func in checks:
        print(f"\n{name}:")
        try:
            result = check_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
            results.append(False)
    
    print("\n" + "=" * 40)
    
    if all(results):
        print("üéâ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É.")
        print("\nüöÄ –°–ø–æ—Å–æ–±–∏ –∑–∞–ø—É—Å–∫—É:")
        print("  ‚Ä¢ Python: python run_spotisplit.py")
        print("  ‚Ä¢ Jupyter: jupyter notebook spotisplit_mvp.ipynb")
        print("  ‚Ä¢ Make: make run")
    else:
        print("‚ùå –î–µ—è–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ.")
        print("\nüîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:")
        print("  ‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: make setup")
        print("  ‚Ä¢ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: make config")
        print("  ‚Ä¢ –î–æ–≤—ñ–¥–∫–∞: make help")
    
    return all(results)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
